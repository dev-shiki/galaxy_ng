name: SonarQube Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:  # Allows manual triggering from GitHub UI

jobs:
  test:
    name: Run Tests with Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags (needed for SonarQube)
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y libsasl2-dev libldap2-dev libssl-dev gettext
      
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install tox coverage[toml]
          
          # Install requirements files that exist
          for req_file in dev_requirements.txt unittest_requirements.txt lint_requirements.txt; do
            if [ -f "$req_file" ]; then
              echo "Installing dependencies from $req_file"
              pip install -r "$req_file" || echo "Warning: Some packages in $req_file failed to install"
            fi
          done
          
          # Install the package in development mode
          pip install -e .
      
      - name: Run tests with coverage
        run: |
          # Run tests with tox
          tox --colored yes -e py311 || true
          
          # If PR number is available, inject it into coverage.xml
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            sed -i '2i <!-- PR ${{ github.event.number }} -->' coverage.xml
          fi
          
          # Make sure coverage.xml exists
          if [ ! -f coverage.xml ]; then
            echo "<?xml version='1.0' encoding='UTF-8'?><coverage></coverage>" > coverage.xml
          fi
      
      - name: Upload coverage as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.xml
          retention-days: 1
  
  sonarqube:
    name: SonarQube Analysis
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
      
      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      
      # Self-hosted SonarQube is used if SONAR_TOKEN and SONAR_HOST_URL are defined
      - name: Self-hosted SonarQube Scan
        if: secrets.SONAR_TOKEN != '' && secrets.SONAR_HOST_URL != ''
        uses: SonarSource/sonarqube-scan-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}
            -Dsonar.python.coverage.reportPaths=coverage.xml
            ${{ github.event_name == 'pull_request' && format('-Dsonar.pullrequest.key={0}', github.event.number) || '' }}
            ${{ github.event_name == 'pull_request' && format('-Dsonar.pullrequest.branch={0}', github.head_ref) || '' }}
            ${{ github.event_name == 'pull_request' && format('-Dsonar.pullrequest.base={0}', github.base_ref) || '' }}