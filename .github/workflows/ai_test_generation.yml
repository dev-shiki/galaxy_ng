name: AI-Powered Test Generation

on:
  workflow_dispatch:
    inputs:
      limit:
        description: 'Maximum number of modules to generate tests for'
        required: false
        default: '5'
        type: number
      model:
        description: 'SambaNova model to use'
        required: false
        default: 'Qwen2.5-Coder-32B-Instruct'
        type: string
      create_pr:
        description: 'Create PR with generated tests'
        required: false
        default: true
        type: boolean

jobs:
  analyze-coverage:
    name: Analyze Coverage and Generate Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better context
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y libsasl2-dev libldap2-dev libssl-dev gettext
      
      - name: Install dependencies
        run: |
          # Install core requirements
          python -m pip install --upgrade pip wheel setuptools
          pip install tox

          # Install the package itself in development mode
          pip install -e .
      
      - name: Create test infrastructure
        run: |
          # Create a mock pulp_smash config to avoid errors
          mkdir -p ~/.config/pulp_smash
          cat << EOF > ~/.config/pulp_smash/settings.json
          {
              "pulp": {
                  "auth": ["admin", "admin"],
                  "version": "3.0",
                  "selinux enabled": false
              },
              "hosts": [
                  {
                      "hostname": "localhost",
                      "roles": {
                          "api": {"port": 24817, "scheme": "http", "service": "nginx"},
                          "content": {"port": 24816, "scheme": "http", "service": "pulp_content_app"},
                          "pulp resource manager": {},
                          "pulp workers": {},
                          "redis": {},
                          "shell": {"transport": "local"},
                          "squid": {}
                      }
                  }
              ]
          }
          EOF
      
      - name: Run original tests
        run: |
          # Run tests with tox as it was working before - DON'T CHANGE THIS PART
          tox --colored yes -e py311 || true
          
          # Make a backup of the original coverage.xml
          if [ -f coverage.xml ]; then
            cp coverage.xml original_coverage.xml
          else
            echo "<?xml version='1.0' encoding='UTF-8'?><coverage></coverage>" > original_coverage.xml
          fi
      
      - name: Analyze coverage for test candidates
        run: |
          python .github/scripts/coverage_analyzer.py original_coverage.xml test_candidates.json
      
      - name: Set up SambaNova API Key
        run: |
          echo "SAMBANOVA_API_KEY=${{ secrets.SAMBANOVA_API_KEY }}" >> $GITHUB_ENV
      
      - name: Generate tests with AI
        run: |
          python .github/scripts/ai_test_generator.py \
            --candidates test_candidates.json \
            --limit ${{ github.event.inputs.limit }} \
            --model ${{ github.event.inputs.model }} \
            --output-dir generated_tests
      
      - name: Prepare generated tests
        run: |
          # Create directory for the fixed tests
          mkdir -p galaxy_ng/tests/unit/ai_generated/
          
          # Create an __init__.py file to make the directory a proper package
          touch galaxy_ng/tests/unit/ai_generated/__init__.py
          
          # For each generated test file, apply fixes and copy to the test directory
          for test_file in $(find generated_tests -name "test_*.py"); do
            echo "Processing $test_file"
            dest_file="galaxy_ng/tests/unit/ai_generated/$(basename "$test_file")"
            
            # Copy first, then modify
            cp "$test_file" "$dest_file"
            
            # Add required imports and setup to the beginning
            sed -i '1i\
            import os\n\
            import sys\n\
            import re\n\
            import pytest\n\
            from unittest import mock\n\
            \n\
            # Setup Django environment\n\
            os.environ.setdefault("DJANGO_SETTINGS_MODULE", "galaxy_ng.settings")\n\
            # Add project root to path if needed\n\
            project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), "../../../.."))\n\
            if project_root not in sys.path:\n\
                sys.path.insert(0, project_root)\n\
            \n\
            import django\n\
            django.setup()\n\
            \n\
            # Use pytest marks for Django database handling\n\
            pytestmark = pytest.mark.django_db\n' "$dest_file"
          done
      
      - name: Create combined PR
        if: ${{ github.event.inputs.create_pr == 'true' }}
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Add AI-Generated tests to improve coverage"
          title: "AI-Generated Tests"
          body: |
            This PR contains AI-generated tests to improve code coverage.
            
            The tests have been placed in the `galaxy_ng/tests/unit/ai_generated/` directory.
            
            Generated using:
            - Model: ${{ github.event.inputs.model }}
            - Modules analyzed: ${{ github.event.inputs.limit }}
            
            No-Issue
          branch: ai-generated-tests-${{ github.run_id }}
          base: ${{ github.ref_name }}
          labels: |
            ai-generated
            testing
            automated-pr
      
      - name: Upload generated tests as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generated-tests
          path: |
            generated_tests/
            galaxy_ng/tests/unit/ai_generated/
            test_candidates.json
            original_coverage.xml
          retention-days: 7