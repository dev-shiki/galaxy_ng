name: AI-Powered Test Generation

on:
  workflow_dispatch:
    inputs:
      limit:
        description: 'Maximum number of modules to generate tests for'
        required: false
        default: '5'
        type: number
      model:
        description: 'SambaNova model to use'
        required: false
        default: 'QwQ-32B'
        type: string
      create_pr:
        description: 'Create PR with generated tests'
        required: false
        default: true
        type: boolean

jobs:
  analyze-coverage:
    name: Analyze Coverage and Generate Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better context
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y libsasl2-dev libldap2-dev libssl-dev gettext
      
      - name: Install test dependencies
        run: |
          bash .github/scripts/install_test_dependencies.sh
      
      - name: Run tests with coverage
        run: |
          # Create pytest.ini to configure pytest properly
          echo "[pytest]" > pytest.ini
          echo "testpaths = galaxy_ng" >> pytest.ini
          echo "python_files = test_*.py" >> pytest.ini
          echo "python_classes = Test*" >> pytest.ini
          echo "python_functions = test_*" >> pytest.ini
          echo "markers =" >> pytest.ini
          echo "    deployment_standalone: marks tests to run in standalone mode" >> pytest.ini
          echo "    deployment_community: marks tests to run in community mode" >> pytest.ini
          echo "    deployment_cloud: marks tests to run in cloud/insights mode" >> pytest.ini
          echo "addopts = -p no:pulp_ansible" >> pytest.ini
          
          # Create .coveragerc file for coverage configuration
          echo "[run]" > .coveragerc
          echo "source = galaxy_ng" >> .coveragerc
          echo "omit = */tests/*,*/migrations/*,*/_vendor/*" >> .coveragerc
          
          # Run tests with tox
          tox --colored yes -e py311 || true
          
          # Make sure coverage.xml exists
          if [ ! -f coverage.xml ]; then
            echo "<?xml version='1.0' encoding='UTF-8'?><coverage></coverage>" > coverage.xml
          fi
      
      - name: Analyze coverage for test candidates
        run: |
          python .github/scripts/coverage_analyzer.py coverage.xml test_candidates.json
      
      - name: Set up SambaNova API Key
        run: |
          echo "SAMBANOVA_API_KEY=${{ secrets.SAMBANOVA_API_KEY }}" >> $GITHUB_ENV
      
      - name: Generate tests with AI
        run: |
          python .github/scripts/ai_test_generator.py \
            --candidates test_candidates.json \
            --limit ${{ github.event.inputs.limit }} \
            --model ${{ github.event.inputs.model }} \
            --output-dir generated_tests
      
      - name: Validate generated tests
        run: |
          # Create a basic Django settings module for tests if it doesn't exist
          mkdir -p galaxy_ng
          if [ ! -f galaxy_ng/settings.py ]; then
            echo "from pulpcore.app.settings import *" > galaxy_ng/settings.py
            echo "# Test-specific settings" >> galaxy_ng/settings.py
            echo "DATABASES = {'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}}" >> galaxy_ng/settings.py
          fi
          
          python .github/scripts/test_validator.py generated_tests/generation_results.json coverage.xml
      
      - name: Upload generated tests as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generated-tests
          path: |
            generated_tests/
            test_candidates.json
            coverage.xml
          retention-days: 7
      
      - name: Compare coverage results
        run: |
          if [ -f "validation_results.json" ]; then
            # Extract coverage data from the validation results
            COVERAGE_BEFORE=$(python -c "import json; data = json.load(open('generated_tests/validation_results.json')); print(sum([r.get('original_coverage', 0) or 0 for r in data]) / len(data) if data else 0)")
            COVERAGE_AFTER=$(python -c "import json; data = json.load(open('generated_tests/validation_results.json')); print(sum([r.get('new_coverage', 0) or 0 for r in data]) / len(data) if data else 0)")
            COVERAGE_DIFF=$(python -c "print(round(${COVERAGE_AFTER} - ${COVERAGE_BEFORE}, 2))")
            
            echo "Original coverage (avg): ${COVERAGE_BEFORE}%"
            echo "New coverage (avg): ${COVERAGE_AFTER}%"
            echo "Difference: ${COVERAGE_DIFF}%"
            
            echo "COVERAGE_BEFORE=${COVERAGE_BEFORE}" >> $GITHUB_ENV
            echo "COVERAGE_AFTER=${COVERAGE_AFTER}" >> $GITHUB_ENV
            echo "COVERAGE_DIFF=${COVERAGE_DIFF}" >> $GITHUB_ENV
          else
            echo "COVERAGE_BEFORE=0" >> $GITHUB_ENV
            echo "COVERAGE_AFTER=0" >> $GITHUB_ENV
            echo "COVERAGE_DIFF=0" >> $GITHUB_ENV
          fi
      
      - name: Create PR with Generated Tests
        if: ${{ github.event.inputs.create_pr == 'true' }}
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "AI-Generated tests to improve coverage"
          title: "AI-Generated Tests (Coverage ${{ env.COVERAGE_BEFORE }}% â†’ ${{ env.COVERAGE_AFTER }}%)"
          body: |
            This PR contains AI-generated tests to improve code coverage.
            
            - Original coverage: ${{ env.COVERAGE_BEFORE }}%
            - New coverage: ${{ env.COVERAGE_AFTER }}%
            - Improvement: ${{ env.COVERAGE_DIFF }}%
            
            Please review the generated tests and make any necessary adjustments.
            
            Generated using:
            - Model: ${{ github.event.inputs.model }}
            - Modules analyzed: ${{ github.event.inputs.limit }}
            
            No-Issue
          branch: ai-generated-tests-${{ github.run_id }}
          base: ${{ github.ref_name }}
          labels: |
            ai-generated
            testing
            automated-pr