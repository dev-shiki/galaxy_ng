name: AI-Powered Test Generation

on:
  workflow_dispatch:
    inputs:
      limit:
        description: 'Maximum number of modules to generate tests for'
        required: false
        default: '5'
        type: number
      model:
        description: 'SambaNova model to use'
        required: false
        default: 'Qwen2.5-Coder-32B-Instruct'
        type: string
      create_pr:
        description: 'Create PR with generated tests'
        required: false
        default: true
        type: boolean

jobs:
  analyze-coverage:
    name: Analyze Coverage and Generate Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better context
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      
      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y libsasl2-dev libldap2-dev libssl-dev gettext
      
      - name: Install test dependencies
        run: |
          # Install core requirements
          python -m pip install --upgrade pip wheel setuptools
          
          # Install test dependencies from requirements files if they exist
          for req_file in unittest_requirements.txt dev_requirements.txt; do
            if [ -f "$req_file" ]; then
              pip install -r "$req_file"
            fi
          done
          
          # Install specific dependencies needed for testing
          pip install pytest pytest-django pytest-cov mock coverage tox django djangorestframework
          
          # Install the package itself in development mode
          pip install -e .
      
      - name: Configure test environment
        run: |
          # Create a minimal Django settings module for testing
          mkdir -p galaxy_ng
          cat << EOF > galaxy_ng/settings.py
          # Minimal test settings for Galaxy NG
          
          # Use in-memory SQLite for testing
          DATABASES = {
              'default': {
                  'ENGINE': 'django.db.backends.sqlite3',
                  'NAME': ':memory:',
              }
          }
          
          # Make sure the secret key is consistent
          SECRET_KEY = 'test-key-for-galaxy-ng-testing'
          
          # Disable CSRF for testing
          MIDDLEWARE = []
          
          # Minimal installed apps
          INSTALLED_APPS = [
              'django.contrib.auth',
              'django.contrib.contenttypes',
              'django.contrib.sessions',
              'django.contrib.messages',
              'django.contrib.staticfiles',
              'rest_framework',
          ]
          
          # Simplified auth for testing
          AUTHENTICATION_BACKENDS = [
              'django.contrib.auth.backends.ModelBackend',
          ]
          EOF
          
          # Create a mock pulp_smash config
          mkdir -p ~/.config/pulp_smash
          cat << EOF > ~/.config/pulp_smash/settings.json
          {
              "pulp": {
                  "auth": ["admin", "admin"],
                  "version": "3.0",
                  "selinux enabled": false
              },
              "hosts": [
                  {
                      "hostname": "localhost",
                      "roles": {
                          "api": {"port": 24817, "scheme": "http", "service": "nginx"},
                          "content": {"port": 24816, "scheme": "http", "service": "pulp_content_app"},
                          "pulp resource manager": {},
                          "pulp workers": {},
                          "redis": {},
                          "shell": {"transport": "local"},
                          "squid": {}
                      }
                  }
              ]
          }
          EOF
          
          # Create pytest.ini with proper plugin configuration
          cat << EOF > pytest.ini
          [pytest]
          testpaths = galaxy_ng
          python_files = test_*.py
          python_classes = Test*
          python_functions = test_*
          DJANGO_SETTINGS_MODULE = galaxy_ng.settings
          addopts = -p no:pulp_smash -p no:pulpcore -p no:pulp_ansible
          EOF
          
          # Create .coveragerc file
          cat << EOF > .coveragerc
          [run]
          source = galaxy_ng
          omit = */tests/*, */migrations/*, */_vendor/*
          EOF
      
      - name: Run tests with coverage
        run: |
          # Run a simple coverage collection - skip errors
          coverage run --source=galaxy_ng --omit="*/tests/*,*/migrations/*" -m pytest galaxy_ng || true
          
          # Generate coverage report
          coverage xml
          
          # Make sure coverage.xml exists
          if [ ! -f coverage.xml ]; then
            echo "<?xml version='1.0' encoding='UTF-8'?><coverage></coverage>" > coverage.xml
          fi
      
      - name: Analyze coverage for test candidates
        run: |
          python .github/scripts/coverage_analyzer.py coverage.xml test_candidates.json
      
      - name: Set up SambaNova API Key
        run: |
          echo "SAMBANOVA_API_KEY=${{ secrets.SAMBANOVA_API_KEY }}" >> $GITHUB_ENV
      
      - name: Generate tests with AI
        run: |
          python .github/scripts/ai_test_generator.py \
            --candidates test_candidates.json \
            --limit ${{ github.event.inputs.limit }} \
            --model ${{ github.event.inputs.model }} \
            --output-dir generated_tests
      
      - name: Validate generated tests
        run: |
          # Run the test validator script with our generated tests
          python .github/scripts/test_validator.py generated_tests/generation_results.json coverage.xml
      
      - name: Run test suite with new tests
        run: |
          # Copy the generated tests to the appropriate test directories
          find generated_tests -name "test_*.py" -exec bash -c 'cp "$0" "galaxy_ng/tests/$(echo $0 | sed -n "s/generated_tests\/test_\(.*\)\.py/\1/p" | sed "s/_/\//g" | xargs dirname)/"' {} \;
          
          # Run the full test suite with coverage
          coverage run --source=galaxy_ng --omit="*/tests/*,*/migrations/*" -m pytest galaxy_ng -p no:pulp_smash -p no:pulpcore -p no:pulp_ansible || true
          
          # Generate new coverage report
          coverage xml -o new_coverage.xml
      
      - name: Upload generated tests as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generated-tests
          path: |
            generated_tests/
            test_candidates.json
            coverage.xml
            new_coverage.xml
          retention-days: 7
      
      - name: Compare coverage results
        run: |
          # Extract overall coverage from reports
          if [ -f "coverage.xml" ] && [ -f "new_coverage.xml" ]; then
            COVERAGE_BEFORE=$(grep -oP 'line-rate="\K[0-9.]+' coverage.xml | head -1)
            COVERAGE_AFTER=$(grep -oP 'line-rate="\K[0-9.]+' new_coverage.xml | head -1)
            
            # Convert to percentage (handle null values)
            COVERAGE_BEFORE_PCT=$(python -c "print(float('${COVERAGE_BEFORE}' or '0') * 100)")
            COVERAGE_AFTER_PCT=$(python -c "print(float('${COVERAGE_AFTER}' or '0') * 100)")
            
            # Calculate difference
            COVERAGE_DIFF=$(python -c "print(float('${COVERAGE_AFTER_PCT}') - float('${COVERAGE_BEFORE_PCT}'))")
            
            echo "Original coverage: ${COVERAGE_BEFORE_PCT}%"
            echo "New coverage: ${COVERAGE_AFTER_PCT}%"
            echo "Difference: ${COVERAGE_DIFF}%"
            
            echo "COVERAGE_BEFORE=${COVERAGE_BEFORE_PCT}" >> $GITHUB_ENV
            echo "COVERAGE_AFTER=${COVERAGE_AFTER_PCT}" >> $GITHUB_ENV
            echo "COVERAGE_DIFF=${COVERAGE_DIFF}" >> $GITHUB_ENV
          else
            echo "COVERAGE_BEFORE=0" >> $GITHUB_ENV
            echo "COVERAGE_AFTER=0" >> $GITHUB_ENV
            echo "COVERAGE_DIFF=0" >> $GITHUB_ENV
          fi
      
      - name: Create PR with Generated Tests
        if: ${{ github.event.inputs.create_pr == 'true' }}
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "AI-Generated tests to improve coverage"
          title: "AI-Generated Tests (Coverage ${{ env.COVERAGE_BEFORE }}% â†’ ${{ env.COVERAGE_AFTER }}%)"
          body: |
            This PR contains AI-generated tests to improve code coverage.
            
            - Original coverage: ${{ env.COVERAGE_BEFORE }}%
            - New coverage: ${{ env.COVERAGE_AFTER }}%
            - Improvement: ${{ env.COVERAGE_DIFF }}%
            
            Please review the generated tests and make any necessary adjustments.
            
            Generated using:
            - Model: ${{ github.event.inputs.model }}
            - Modules analyzed: ${{ github.event.inputs.limit }}
            
            No-Issue
          branch: ai-generated-tests-${{ github.run_id }}
          base: ${{ github.ref_name }}
          labels: |
            ai-generated
            testing
            automated-pr